import requests

SYSCALL_TABLE_URL = "https://raw.githubusercontent.com/torvalds/linux/master/arch/x86/entry/syscalls/syscall_64.tbl"
HEADER_FILE = "syscall_numbers.h"

def get_syscalls() -> list[str|None]:
    table = requests.get(SYSCALL_TABLE_URL).text
    table_lines = table.splitlines()

    # find the end of the leading comment
    for i, line in enumerate(table_lines):
        if not line.startswith("#"):
            comment_end = i
            break
    
    syscall_lines = table_lines[comment_end:]
    syscalls = [None] * 512

    max_number = -1
    for line in syscall_lines:
        # this line isn't a syscall
        if not line or not line[0].isnumeric():
            continue

        number, abi, name, *_ = line.split()
        if abi in ("64", "common"):
            number = int(number)

            syscalls[number] = name
            max_number = max(max_number, number)

    return syscalls[:max_number + 1]

def write_header(syscalls: list[str|None]) -> None:
    with open(HEADER_FILE, "w") as header:
        header.write("// This header is autogenerated by `extract_syscall_numbers.py`.\n")
        header.write(f"// It extracts the syscall numbers from {SYSCALL_TABLE_URL}\n\n")

        header.write(f"#define NUM_SYSCALLS {len(syscalls)}\n")
        syscalls_str = ", ".join([
            f"\"{syscall}\"" if syscall else f"\"INVALID[{i}]\"" 
            for i, syscall in enumerate(syscalls)
        ])
        header.write(f"const char *syscall_numbers[NUM_SYSCALLS] = {{{syscalls_str}}};\n")

def main() -> None:
    syscalls = get_syscalls()
    write_header(syscalls)

if __name__ == "__main__":
    main()
